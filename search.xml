<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>序章：告白</title>
      <link href="lian-ai/gift-to-cyy/"/>
      <url>lian-ai/gift-to-cyy/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="31431ed1de6d9d12ba9d6da96d0a2b14c55e3c7878f7ff5a5edf028d4b5d5ba5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 恋爱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共享画板</title>
      <link href="xiang-mu/gong-xiang-wang-luo-hua-ban/"/>
      <url>xiang-mu/gong-xiang-wang-luo-hua-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="共享网络画板"><a href="#共享网络画板" class="headerlink" title="共享网络画板"></a>共享网络画板</h1><p>项目地址：<a href="https://github.com/ifrozenwhale/share_drawing">https://github.com/ifrozenwhale/share_drawing</a></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>解耦合。分别实现数据模型、控制器和视图，拓展性强，可维护性高。</li><li>命令与事务封装。数据的一次更新为一条命令，用户的一次操作为一个事务。</li><li>undo/redo 实现。由 controller 维护操作栈，由 数据模型维护数据镜像，恢复、重做以事务为可见单位。</li><li>增量同步更新。标记对象状态，只在必要的时候传输数据。</li><li>中心服务器保留图形数据，客户端之间相对独立。</li></ul><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image1.png" alt="主窗口"></p><h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><ul><li>任意曲线（Free Line）、圆点（Dot）、直线（Line）、矩形（Rectangle）、三角形（Triangle）</li><li>套索工具（Select）<ul><li>矩形区域选择框（支持一个或多个图形）</li><li>变形（Reshape）</li><li>移动（Move）</li></ul></li><li>样式设置与修改（Style）<ul><li>线条颜色（Line Color）</li><li>线条粗细（Stroke）</li><li>颜色填充（Fill）</li></ul></li><li>进阶操作<ul><li>抹除（Remove）：可同时抹除一个或者多个图形</li><li>清空（Clear）</li><li>撤销（Undo）</li><li>重做（Redo）</li></ul></li><li>图层：<ul><li>切换图层和图层显示</li><li>图层创建和删除</li><li>图层操作</li></ul></li><li>画板设置<ul><li>画板背景色（Background Color）</li><li>默认线条颜色（Default Color）</li><li>默认线条粗细（Default Stroke）</li></ul></li><li>保存与导出<ul><li>保存当前用户设置</li><li>保存图形为数据文件</li><li>利用套索工具，导出自定义区域为图片</li><li>可加载已保存的图形文件</li></ul></li><li>同步绘图<ul><li>共享画板视图</li><li>共享图形编辑权限</li></ul></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ol><li>客户端为 client 包下的 AppClient1 和 AppClient2</li><li>服务端为 server 包下的 Server（默认配置了本地启动，端口号）</li><li>其他类的 main 函数为测试函数</li></ol><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol><li>free line 为任意线条，dot 为实心圆点，line 为直线，triangle 为等腰三角形，rectangle 为矩形。</li><li>select 为套索工具，绘制矩形。可选中整个图形，可选中图形的顶点，可选中图形的边，可选中1个或者多个图形。</li><li>move 为移动操作。select 选中图形后，以鼠标按下位置为起始点，拖动鼠标进行移动。</li><li>reshape 为变形操作。需通过 select 选中图形的某个顶点，然后点击 reshape 进入变形模式，拖动顶点完成变形。</li><li>style 为样式设置，可以设置颜色和线条粗细。如若未选中图形，则只设置画笔样式；选中图形，则对选中图形进行样式的修改。</li><li>fill 为填充操作。点击 fill 后，选择颜色，再点击图形内部（点中多个，选中最后绘制的图形），完成填充。</li><li>clear 为清空画板。</li><li>remove 为移除图形，需要先 select 选择1个或多个图形，再点击 remove 进行移除。</li><li>undo 和 redo 支持上述所有操作，进行回退和重做。</li><li>File 菜单栏支持导出图片，支持保存为 .shape 数据文件，启动程序时可以打开 .shape 文件。</li><li> Settings 菜单栏 style 支持默认样式的修改，即启动应用后的画笔颜色和粗细；</li><li> Settings 中 background 项为设置画板的背景颜色，此设置将会被保存，下次启动时默认颜色即设置的颜色。</li><li>登录时选择加入服务器，则会同步服务器上的图形数据，进行同步、共享绘图。</li><li>登录时不加入服务器，选择新建画布，则生成空画板；否则选择 .shape 文件初始化画板图形。</li><li>不加入服务器时，可以利用图层分层绘制图形并做一系列的修改。</li></ol><h2 id="类的关系"><a href="#类的关系" class="headerlink" title="类的关系"></a>类的关系</h2><p>Shape 作为数据的抽象基类，实现图形数据的公共方法，Rectangle 等子类完成各自的数据处理操作。</p><p>Graphics 类继承自 java.swingx.JPanel，作为画板，拥有 Shape 数据成员，调用 Shape 及其子类的方法，完成逻辑操作，同时显示图形。</p><p>App类继承自 java.swingx.JFrame，作为主界面类，拥有一系列组件，包括 Graphics 显示图形。</p><p>ErrorView 类继承自 JDialog，以对话框的形式提示。</p><p>StyleConfig 类继承自 JDialog，以对话框的形式供选择。</p><h2 id="部分实现细节"><a href="#部分实现细节" class="headerlink" title="部分实现细节"></a>部分实现细节</h2><ul><li><strong>消除曲线锯齿：</strong>采样鼠标运动点，生成路径，二次曲线连接。位防止点过于密集导致的抖动，设置最小步长间隔。</li><li><strong>套索工具（Lasso）</strong>：由各图形子类负责选中判断。主要分析包含和边界相交情况。</li><li><strong>Undo/redo：</strong>由Graphics负责记录操作，使用一个事务列表和事务索引。shape子类中新增加一个容器，用于记录历史对象；增加一个变量来记录索引。</li><li><strong>导出</strong>：复用矩形选择框，选中导出区域，利用 Robot 截屏和图片 IO 流保存。 </li><li><strong>保存和打开</strong>：实现序列化和反序列化。对打开的文件可以实现除undo、redo外任意的修改操作。</li><li><strong>同步机制</strong>：使用 serverSocket 实现。采用增量更新，标记对象类别为<code>新增、删除、修改</code>，对需要更新的对象进行传输。为了判断对象是否是同一个对象，因为修改操作导致的属性不同，为Shape类增加了属性 uuid，作为唯一标识符。更新图形池时，具体的，判断图形的 active 值，如若为 false 表示已删除，将其从 shapeList 绘图池中移除；否则判断是否有属性不同的对象，若不同，则进一步判断是否具有相同的唯一标识符uuid，是这说明二者为同一个对象，应先删除原对象，再重新添加新对象表示更新；否则直接进行添加。</li><li><strong>整体逻辑</strong><ul><li>顶层：对于App类，负责主界面的按钮等事件监听，在监听到事件发生时，设置全局的行为状态，包括鼠标指针更新，Graphics图形标识等。其只负责向下传达命令，不涉及复杂逻辑操作。</li><li>中间控制器：对于Graphics，监听鼠标事件，完成绘图。一次绘图或者调整，涉及到鼠标的按下（Press），拖动（Drag），以及松开（Release）三个过程，对应于逻辑实现的三个部分，开始处理（startAction），处理过程（acting），处理完成（endAction）。使用有限状态机，设置多个枚举类，ActionType、ActionStatus、ShapeType，根据当前的状态和输入，判断下一步的状态。</li><li>数据：负责各自绘制以及调整操作。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> GUI </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程助手</title>
      <link href="xiang-mu/wecode/"/>
      <url>xiang-mu/wecode/</url>
      
        <content type="html"><![CDATA[<h1 id="基于数据挖掘的编程助手"><a href="#基于数据挖掘的编程助手" class="headerlink" title="基于数据挖掘的编程助手"></a>基于数据挖掘的编程助手</h1><p>项目地址：<a href="https://github.com/ifrozenwhale/wecode">https://github.com/ifrozenwhale/wecode</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527004529613.png" alt="今天你打卡了"></p><h2 id="主要模块实现-前端"><a href="#主要模块实现-前端" class="headerlink" title="主要模块实现 (前端)"></a><strong>主要模块实现</strong> (前端)</h2><h3 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a><strong>登录模块</strong></h3><ul><li>用户在OJ完成账号注册，小程序端只实现登录功能，账号与OJ账号为同一账号。</li><li>OJ端密码存储使用python DJango默认的加密算法pbkdf2_sha256，是一种安全等级较高的加密方式，该加密算法不可逆，只能够进行验证。使用Java实现同样的加密算法，进行微信小程序输入密码的校验，校验一致则登陆成功；否则失败。</li><li>进入小程序后自动判断是否已登录，如未登录则跳转登录界面。</li></ul><h3 id="信息完善模块"><a href="#信息完善模块" class="headerlink" title="信息完善模块"></a><strong>信息完善模块</strong></h3><ul><li>OJ数据库只具有用户的部分信息。在重新设计数据库时，新增加的字段，需要在小程序端进行填写完善，并在数据库中进行对应的更新。</li><li>用户在本模块设置水平、Github地址、个人博客以及所学专业。其中，用户水平分为三级（初级、中级、高级），通过下拉界面实现。</li></ul><h3 id="打卡模块"><a href="#打卡模块" class="headerlink" title="打卡模块"></a><strong>打卡模块</strong></h3><ul><li>用户某天在OJ系统提交代码，并顺利通过（AC），则认定当日完成打卡。</li><li>通过定时任务Scheduled Task来更新打卡记录，每天定时执行，计算当前连续打卡天数。如果出现中断情况，连续打卡天数清零，重新进行计算。</li><li>实现了打卡天数查询接口。</li></ul><h3 id="日历模块"><a href="#日历模块" class="headerlink" title="日历模块"></a><strong>日历模块</strong></h3><ul><li>引入日历，并与打卡模块结合。用户打卡的日期，在日历视图中高亮颜色显示。</li><li>实现日历点击相应，点击日期，显示当日练习题目情况，包括AC率、共尝试提交次数以及完成题目数。</li></ul><h3 id="计划模块"><a href="#计划模块" class="headerlink" title="计划模块"></a><strong>计划模块</strong></h3><ul><li>用户可以制定个性化的计划，督促自己进行编程练习。计划包括标题、开始时间、结束时间、计划描述，以及计划练习题目。题目可以从所有的题目中自行添加，也可以从推荐的习题集中批量添加。</li><li>可以显示正在将进行的计划，以及已经完成的计划。当一个计划中的习题全部被完成时，自动标识该计划为完成，加入到已完成列表中进行归档，并提醒用户完成状态。可以切换已完成任务视图隐藏、显示状态。</li><li>任务完成后，自动弹窗，用户可以当即写下对计划的评论或总结。总结将被记录进数据库中。</li><li>可以查看正在进行的计划详情、已完成的计划详情。已完成的计划详情中，可以看到任务实际用时天数、完成题目情况等，可以编辑任务总结并重新提交。</li><li>在首页，除了显示打卡信息外，还将显示计划进度。包括计划截止天数、（待复习题目）已完成题目、未完成题目。</li></ul><h3 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a><strong>题目列表</strong></h3><ul><li>同步显示OJ系统中的所有题目，以列表方式呈现。</li><li>题目可以根据难度查询、根据AC率筛选查询等等。例如可以显示难度为2（中等）的题目，或者显示AC率小于0.5的所有题目。</li></ul><h3 id="训练统计"><a href="#训练统计" class="headerlink" title="训练统计"></a><strong>训练统计</strong></h3><p>对用户练习进行了统计分析，使用数据可视化库echarts，支持多种时间视角进行数据可视化。</p><ul><li><p><strong>日视图</strong>。将一天划分为24小时，统计分析每小时的做题情况，并以柱状图进行呈现。拖动下方滑动块可以查看不同日期的做题情况，拉伸滑动块可以缩放视图，以同时看到更多天数的练习情况，或者集中一天中某一段时间，进行分析。为了减少相应时间，默认请求7天的数据，点击”更早”，可以再次请求呈现更多数据。此外，可以根据做题的结果进行筛选，呈现结果并对比。</p></li><li><p><strong>周视图</strong>。一周划分为7天，统计分析一周中每天的练习情况，以柱状图呈现，可调整（同日视图）。</p></li><li><p><strong>月视图</strong>。以一个月为视角，呈现每天的练习情况，以折线图呈现。大小和范围可调整。</p></li><li><p><strong>年视图</strong>。将一年划分为12个月，呈现每个月的练习情况。</p></li></ul><h3 id="错题笔记"><a href="#错题笔记" class="headerlink" title="错题笔记"></a><strong>错题笔记</strong></h3><ul><li><p>收集用户编程练习中的错题并进行整理。对错题进行了分类整理，根据错误类型的不同（WA、TLE、MLE、RE、PE等），并按照错误次数进行排序，以卡片的形式进行呈现。</p></li><li><p>点击错题卡片，将对象JSON序列化传参，可以跳转到错题的详情页，展示题目的基本信息以及题目标签。其中，题目描述以HTML的形式进行样式渲染。</p></li></ul><h3 id="榜单排名"><a href="#榜单排名" class="headerlink" title="榜单排名"></a><strong>榜单排名</strong></h3><ul><li>根据用户的水平进行筛选，在同水平级内部进行排名。排名可以按照AC率、AC数目、AC速度（近一个月每天平均练习数）进行排序，生成榜单。</li><li>榜单在每天定时进行更新。</li></ul><h3 id="题目推荐"><a href="#题目推荐" class="headerlink" title="题目推荐"></a><strong>题目推荐</strong></h3><ul><li>在OJ上发布精选的题目集，作为题目推荐。这些题目经过筛选，促成专题，呈现给用户。</li><li>用户为每个题目打题目标签 (tag)，根据错题反馈，基于内容推荐题目。</li><li>构建 <code>user-wa</code> 矩阵，类比电影推荐中 <code>user-rating</code> 的矩阵分解方法，以题目难度和完成情况作为 <code>user-problem</code> 指标，协同过滤推荐。</li></ul><h3 id="我的经验"><a href="#我的经验" class="headerlink" title="我的经验"></a><strong>我的经验</strong></h3><ul><li>用户编程练习，完成题目后，获得一定的经验值，不同难度的题目完成获得的经验值也不同。</li></ul><h3 id="打卡提醒"><a href="#打卡提醒" class="headerlink" title="打卡提醒"></a><strong>打卡提醒</strong></h3><ul><li>计算用户上一次打卡到今天的时间，提示用户需要打卡。</li></ul><h3 id="关于及分享"><a href="#关于及分享" class="headerlink" title="关于及分享"></a><strong>关于及分享</strong></h3><h2 id="界面（小程序部分界面）"><a href="#界面（小程序部分界面）" class="headerlink" title="界面（小程序部分界面）"></a><strong>界面</strong>（小程序部分界面）</h2><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210526235933093.png" alt="部分界面-1"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527000051023.png" alt="部分界面-2"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527000231308.png" alt="部分界面-3"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527000334405.png" alt="部分界面-4"></p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a><strong>后端</strong></h2><h3 id="OJ-部署"><a href="#OJ-部署" class="headerlink" title="OJ 部署"></a>OJ 部署</h3><p>部署在 linux 中的 docker 容器中。</p><h3 id="数据库重构和数据迁移"><a href="#数据库重构和数据迁移" class="headerlink" title="数据库重构和数据迁移"></a>数据库重构和数据迁移</h3><p>为了方便描述，将 postgresql 数据库称为 db0，将 mysql 数据库称为 db1。</p><p>OJ 系统使用 postgresql 数据库，数据库位于远程 linux 主机的 docker 容器中，该数据库记录了较为全面的基础数据。为了实现需求，建立了 mysql 数据库，部分数据来源于 OJ 数据库。对需要的数据进行同步。使用Java的定时任务，定时更新数据库内容。</p><p>同步方式有两种，对于涉及数据库增加记录、修改记录操作较频繁的表，使用追加更新的方式；对于更新较为频繁的表，使用覆盖的方式。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>前后端分离，尽可能向小程序端提供 Rest 风格的 API，以 Json 数据格式提供数据服务。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>例如，对请求进行分次，在微信小程序端的训练统计模块，由于采用的是动态加载，即只有当用户点击某种视图，才会进行数据请求；且每次只请求部分数据，当需要查看更多日期的数据时，通过按钮增量请求，因此响应速度较快，平均每张图加载时间在1-2秒。</p><p>再比如，利用小程序 localStorage 缓存数据，避免不必要的请求成本开支。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> GUI </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议封装</title>
      <link href="xiang-mu/ip-protocal/"/>
      <url>xiang-mu/ip-protocal/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ifrozenwhale/network-ipv4-udp">https://github.com/ifrozenwhale/network-ipv4-udp</a></p><h1 id="网络协议封装"><a href="#网络协议封装" class="headerlink" title="网络协议封装"></a>网络协议封装</h1><p>在 Linux 上使用 C 语言在数据链路层上通信，实现Ethernet，IPv4 和 UDP 协议以及应用层封装。</p><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><p>文件目录结构如下</p><pre class="line-numbers language-none"><code class="language-none">.├── Makefile├── chat.c├── client.c├── myhdr.h├── utils.c└── utils.h1 directory, 6 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Makefile</code>编译多文件。</li><li><code>chat.c</code>，用于展示聊天的内容（只输出了最终发送和收到的结果）</li><li><code>client.c</code>，用于展示帧的解析封装、分片等过程。</li><li><code>myhdr.h</code>，定义了自己的IP头，UDP头，以及其他一些数据结构和常量值。</li><li><code>utils.h</code>，声明了一些工具函数，主要有校验和计算，ip地址转换等。</li><li><code>utils.c</code>，工具函数的实现。</li></ul><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="数据链路层（Ethernet-Frame）"><a href="#数据链路层（Ethernet-Frame）" class="headerlink" title="数据链路层（Ethernet Frame）"></a>数据链路层（Ethernet Frame）</h3><ol><li>使用第一个project要求的帧结构<code>dst_mac(6) | src_mac(6) | protocal(2) | payload(46-1500) | fcs(4) </code>。</li><li>fcs使用crc32算法进行计算，接收端如果校验失败抛出异常。</li><li>payload长度不足46时，使用<code>bzero</code>进行0比特填充，长于1500则抛出异常。</li></ol><h3 id="网络层（IP-packet）"><a href="#网络层（IP-packet）" class="headerlink" title="网络层（IP packet）"></a>网络层（IP packet）</h3><ol><li><p>使用自定义的固定的IPv4头（20字节）。</p></li><li><p>头检验和check使用16位半字相加取结果补码，接收端如果校验失败抛出异常。</p></li><li><p>IP分片</p><p>发送时</p><ul><li>每一片都具有IP头，但是只有第一片有UDP头。</li><li>偏移值offset使用8个字节作为偏移单位，因此每一片的长度为8的整数倍。</li></ul><p>接收时如如果MF（more frag)=1或者frag 0ff不为0表示分片</p><ul><li>MF=1并且 offset偏移0，为第一片</li><li>MF=0，为最后一片</li><li>其余情况，中间片</li></ul><p>根据IP的id进行分片重组。</p></li></ol><h3 id="运输层（UDP-datagram）"><a href="#运输层（UDP-datagram）" class="headerlink" title="运输层（UDP datagram）"></a>运输层（UDP datagram）</h3><ol><li>使用了自定义的UDP头（8字节）。</li><li>UDP伪首部 、UDP首部 、UDP的数据一起计算校验和，接收端如果校验失败抛出异常。</li></ol><h3 id="应用层（Chat）"><a href="#应用层（Chat）" class="headerlink" title="应用层（Chat）"></a>应用层（Chat）</h3><ol><li>使用多线程库，分别创建读线程和发线程，用于双向的聊天。</li><li>输出解析后的MAC帧结构信息、IP Packet结构信息，UDP datagram结构信息。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>对于非unsigned char类型，使用<code>htons</code>和<code>ntohs</code>进行网络字节序的转化。</li><li>使用<code>raw socket</code>进行数据链路层的通信。</li></ol><h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="运行环境说明"><a href="#运行环境说明" class="headerlink" title="运行环境说明"></a>运行环境说明</h2><ul><li><p>使用了<code>raw socket</code>在linux环境中运行。这里使用了<code>Windows Subsystem for Linux(WSL)</code>作为linux环境。</p></li><li><p>需要修改<code>client.c</code>或者<code>chat.c</code>中前面定义的<code>dst_mac</code>数组为要发送的mac地址。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">mac_addr dst_mac <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0xda</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// dst MAC 地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写了Makefile，用于编译多文件。Makefile文件内容如下：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token symbol">project</span><span class="token punctuation">:</span> client.c chat.c utils.o <span class="token comment"># 编译整个工程所有的文件</span>gcc utils.o client.c -o client -lpthreadgcc utils.o chat.c -o chat -lpthreadgcc -c utils.c <span class="token symbol">clientrun</span><span class="token punctuation">:</span> client.c utils.c <span class="token comment"># 编译详细输出内容的程序，并运行</span>gcc -c utils.cgcc utils.o client.c -o client -lpthreadsudo ./client<span class="token symbol">chatrun</span><span class="token punctuation">:</span> chat.c utils.c <span class="token comment"># 编译用于测试聊天的程序，并运行</span>gcc -c utils.cgcc utils.o  chat.c -o chat -lpthreadsudo ./chat <span class="token symbol">clean</span><span class="token punctuation">:</span> <span class="token comment"># 清除所有的文件</span>rm clientrm chatrm utils.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="聊天形式（只显示数据内容）"><a href="#聊天形式（只显示数据内容）" class="headerlink" title="聊天形式（只显示数据内容）"></a>聊天形式（只显示数据内容）</h2><p>（仅用于测试）发送端和接收端为同一个MAC地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> chatrun<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>分别在两个终端执行上述命令，启动程序</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226130034525.png" alt="image-20201226130034525"></p></li><li><p>两个终端互发消息，如下：</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226130341408.png" alt="image-20201226130341408"></p></li></ol><h2 id="帧的解析和封装体现"><a href="#帧的解析和封装体现" class="headerlink" title="帧的解析和封装体现"></a>帧的解析和封装体现</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> clientrun<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>短消息互发（不分片）</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226131056879.png" alt="image-20201226131056879"></p></li><li><p>长消息（分片，MTU设置为44，即有效数据长度为44-20=24）</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226131246044.png" alt="image-20201226131246044"></p><p><code>My name is Tian Runze, and who are you? </code>长度为41，被分为3片。在最后一片中被正确的组装。</p><p>回复消息，<code>Wow, I am Tian Runze, too!hhh</code>，长度为31，被分为2片，最后一片被正确组装打印出来。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226131735408.png" alt="image-20201226131735408"></p></li></ol><h2 id="抓包测试"><a href="#抓包测试" class="headerlink" title="抓包测试"></a>抓包测试</h2><blockquote><p>由于前两组发消息，都是发往了本机MAC，因此并不能被wireshark抓包抓到。这里使用修改dst mac addr。<br>（仅用于测试）发送端和接收端为不同MAC地址。</p></blockquote><ol><li><p>短消息</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226132414865.png" alt="image-20201226132414865"></p><p>被正确的解析为UDP协议</p></li><li><p>长消息，被分为3片，且成功被wireshark解析到。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226132758462.png" alt="image-20201226132758462"></p></li></ol><h2 id="调试信息"><a href="#调试信息" class="headerlink" title="调试信息"></a>调试信息</h2><h3 id="MAC地址、协议过滤"><a href="#MAC地址、协议过滤" class="headerlink" title="MAC地址、协议过滤"></a>MAC地址、协议过滤</h3><ol><li><p>在网卡模式为混杂模式下，会发现有许多发往非本机MAC的帧被监听到，因此可以首先使用MAC地址进行过滤，只捕捉发往本机MAC地址的帧。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 根据MAC地址过滤，只读取发往本地MAC的帧</span><span class="token keyword">int</span> eq <span class="token operator">=</span> <span class="token function">mac_equal</span><span class="token punctuation">(</span>dst_mac<span class="token punctuation">,</span> my_mac<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eq<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 取消以下注释，输出发往非本机MAC帧的MAC地址</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[NOTE]: not frame to local. To "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">output_mac</span><span class="token punctuation">(</span>dst_mac<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226135934272.png" alt="image-20201226135934272"></p></li><li><p>过滤掉发往非本机MAC的帧，发现仍有部分帧，但是这些帧的FCS校验错误。（没有具体探讨原因，程序运行在windows的子系统linux内核中，不清楚这些帧的来源和结构、协议）</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226140122349.png" alt="image-20201226140122349"></p></li><li><p>因此，实际检测自己的封装和解析的时候，通过自定义了protocol类型来过滤。这里使用学号的尾号4376来进行过滤。只监听自己实现的封装的帧。</p></li></ol><h3 id="校验和测试"><a href="#校验和测试" class="headerlink" title="校验和测试"></a>校验和测试</h3><p>由于实际发帧的时候很少出错，因此可以通过强制出错的方式来检测FCS校验等。</p><h4 id="Mac-Frame出错"><a href="#Mac-Frame出错" class="headerlink" title="Mac Frame出错"></a>Mac Frame出错</h4><p>修改<code>myhdr.h</code>中的宏定义<code>ERROR_TAKEN</code>为1，即可强制MAC帧出错。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226140937442.png" alt="image-20201226140937442"></p><h3 id="IP-packet-出错"><a href="#IP-packet-出错" class="headerlink" title="IP packet 出错"></a>IP packet 出错</h3><p>为了检测IP的校验和，修改<code>myhdr.h</code>中的宏定义<code>ERROR_TAKEN</code>为2，即可强制IP packet出错（但是此时MAC帧也是错的），这里仅为了测试，MAC帧出错时忽略（以模拟帧FCS没有校验出错误的情况）。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226141728968.png" alt="image-20201226141728968"></p><h3 id="UDP-Datagram-出错"><a href="#UDP-Datagram-出错" class="headerlink" title="UDP Datagram 出错"></a>UDP Datagram 出错</h3><p>为了检测UDP的校验和，修改<code>myhdr.h</code>中的宏定义<code>ERROR_TAKEN</code>为2，即可强制UDP datagram出错（但是此时MAC帧也是错的），这里仅为了测试，MAC帧出错时忽略（以模拟帧FCS没有校验出错误的情况）。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226142036807.png" alt="image-20201226142036807"></p><p>以上，所有的功能和测试均实现。</p><h3 id="Git管理"><a href="#Git管理" class="headerlink" title="Git管理"></a>Git管理</h3><p>使用了git进行版本管理，从帧的封装开始，到IP封装、UDP封装，然后做UDP的校验，IP分片重组，最后做多线程的聊天应用。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20201226143057640.png" alt="image-20201226143057640"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> linux </tag>
            
            <tag> 网络 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GUI 文件管理器</title>
      <link href="xiang-mu/file-manager/"/>
      <url>xiang-mu/file-manager/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/ifrozenwhale/file_manager">https://github.com/ifrozenwhale/file_manager</a></p><h1 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h1><h2 id="各模块功能实现"><a href="#各模块功能实现" class="headerlink" title="各模块功能实现"></a>各模块功能实现</h2><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ul><li><strong>界面跳转：</strong></li></ul><ol><li>后退，逐级返回到父级目录。</li><li>前进，按照后退的顺序依次进入子目录。</li><li>当前目录路径显示，输入目录地址进行跳转。</li></ol><ul><li><strong>界面显示：</strong></li></ul><ol><li>文件目录树显示（只显示文件夹）。</li><li>文件列表显示（只显示当前目录下的文件夹和文件），带有系统图标。</li><li>点击文件树中的结点，在文件列表同步显示。</li></ol><ul><li><strong>选择与打开</strong></li></ul><ol><li>支持多选，选中文件高亮显示，点击空白区域取消选中。</li><li>单击文件夹进入，单击文件打开应用。</li></ol><ul><li><strong>右键选中文件</strong></li></ul><ol><li>批量复制，包括所有子目录和文件。</li><li>批量压缩，格式为zip，将多个文件压缩成一个，自定义命名。</li><li>单文件加密，自定义加密密钥。</li></ol><ul><li><strong>右键空白区域</strong></li></ul><ol><li>创建文件夹，自定义命名；</li><li>批量粘贴，粘贴的目录不能是源文件目录的子目录；</li><li>批量解压，解压到当前目录下。</li><li>单文件解密，输入加密密钥，若密钥不正确，加密后的文件仍无法打开。</li></ol><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p>主要是<code>FileModel</code>的实现</p><h3 id="数据记录"><a href="#数据记录" class="headerlink" title="数据记录"></a><strong>数据记录</strong></h3><ul><li>由<code>List&lt;File&gt; defaultListModel</code>和<code>File currentFile</code>负责记录当前目录和目录下的文件、文件夹。</li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h3><ul><li><code>initRoots</code>方法，将磁盘目录，如<code>C:\</code>，<code>D:\</code>，<code>E:\</code>添加进文件列表。</li></ul><h3 id="文件更新"><a href="#文件更新" class="headerlink" title="文件更新"></a><strong>文件更新</strong></h3><ul><li><code>updateModels(File file)</code>方法，将当前文件设为<code>file</code>，并将其当前目录层级下的文件（夹）添加进文件列表。</li></ul><h3 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a><strong>前进和后退</strong></h3><ol><li>由<code>redoStack</code>负责记录操作路径，undo时，得到父级目录下文件和文件夹，更新文件列表，并将文件压入<code>redoStack</code>。</li><li>redo时，弹出栈顶文件，更新当前文件列表。</li><li>细节，如果父级为<code>null</code>，说明当前是磁盘根目录，如<code>D:\</code>，则调用初始化方法<code>initRoots</code>。</li></ol><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a><strong>文件复制</strong></h3><ol><li>由<code>copySources</code>负责存储粘贴板中的文件。</li><li>选中文件后，加入到<code>copySources</code>中。</li><li>粘贴时，判断是文件，还是文件夹<ol><li>如果是文件，则进行文件复制。</li><li>如果是文件夹，递归调用。</li></ol></li><li>异常处理，粘贴的目录不能是源目录的子目录，由<code>isParent</code>进行判断。</li></ol><h3 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a><strong>创建和删除</strong></h3><ol><li>如果不存在，则创建。</li><li>递归删除，由<code>deleteHelp</code>负责递归，如果删除的是文件夹，就递归调用，最终删除根文件。</li><li>对选中的文件遍历执行，批量删除。</li></ol><h3 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a><strong>压缩和解压</strong></h3><ol><li>对于文件，直接压缩。</li><li>对于文件夹，递归压缩。</li></ol><h3 id="文件加密和解密"><a href="#文件加密和解密" class="headerlink" title="文件加密和解密"></a><strong>文件加密和解密</strong></h3><ol><li>对文件读取字节内容，与密钥进行简单的异或加密。</li><li>加密后得到新文件，删除原始文件，并将新文件重命名为原文件。（也可以不删除，防止出问题，重要文件）</li><li>解密的时候，与加密过程相同，输入密钥，读取文件，异或解密。</li></ol><h3 id="取消选中"><a href="#取消选中" class="headerlink" title="取消选中"></a><strong>取消选中</strong></h3><ol><li><p>重写<code>locationToIndex</code>函数，判断点击的位置是否有效</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">locationToIndex</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getCellBounds</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="样式渲染"><a href="#样式渲染" class="headerlink" title="样式渲染"></a><strong>样式渲染</strong></h3><ol><li>实现<code>FileListCellRenderer</code>类继承<code>DefaultListCellRenderer</code></li><li>设置图标，设置显示信息，磁盘根目录使用<code>getPath()</code>，其他目录使用<code>getName()</code>。</li><li>选中设置颜色，取消选中恢复之前的颜色。</li></ol><h3 id="文件树展开"><a href="#文件树展开" class="headerlink" title="文件树展开"></a><strong>文件树展开</strong></h3><ol><li>实现<code>TreeSelectionListener</code>接口，采用延迟加载，即每次点击展开时再加载目录文件。</li></ol><h2 id="软件调试分析"><a href="#软件调试分析" class="headerlink" title="软件调试分析"></a>软件调试分析</h2><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><ol><li><p>启动<code>App</code>类的<code>main</code>函数</p></li><li><p>在<code>FileController</code>初始化的时候，完成对数据成员的初始化，包括添加事件监听，更新初始视图。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">FileController</span><span class="token punctuation">(</span><span class="token class-name">App</span> app<span class="token punctuation">,</span> <span class="token class-name">FileModel</span> fileModel<span class="token punctuation">,</span> <span class="token class-name">FileTreeModel</span> treeModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fileDisplay <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getFileDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fileModel <span class="token operator">=</span> fileModel<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filesTree <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getFilesTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>treeModel <span class="token operator">=</span> treeModel<span class="token punctuation">;</span>        <span class="token comment">// 添加事件监听</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addCopyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CopyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addCreateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreateFileListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addPasteListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PasteListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addUnzipListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnZipListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addZipListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addDeleteListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addMyMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addEncodeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">addDecodeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DecodeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">addUndoListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UndoListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">addRedoListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedoListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">addGoListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GoListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filesTree<span class="token punctuation">.</span><span class="token function">addTreeSelectionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileTreeSelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filesTree<span class="token punctuation">.</span><span class="token function">setRootVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化主视图</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">updateView</span><span class="token punctuation">(</span>fileModel<span class="token punctuation">.</span><span class="token function">getDefaultListModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>监听到事件发生，调用<code>model</code>和<code>view</code>进行逻辑实现并更新视图。例如，展开文件目录树时，需要对三部分视图进行更新（文件树，文件列表，url地址栏）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FileTreeSelListener</span> <span class="token keyword">implements</span> <span class="token class-name">TreeSelectionListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token class-name">TreeSelectionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> filesTree<span class="token punctuation">.</span><span class="token function">getCurrentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到点击的文件结点</span>        <span class="token comment">// 加载目录树</span>        filesTree<span class="token punctuation">.</span><span class="token function">loadingTree</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultMutableTreeNode</span><span class="token punctuation">)</span>        filesTree<span class="token punctuation">.</span><span class="token function">getLastSelectedPathComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> treeModel<span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新文件数据模型</span>        fileModel<span class="token punctuation">.</span><span class="token function">updateModels</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新文件列表视图</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">updateView</span><span class="token punctuation">(</span>fileModel<span class="token punctuation">.</span><span class="token function">getDefaultListModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新url地址显示</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> fileModel<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">updateUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再如，undo操作时，<code>model</code>进行undo，更新数据，然后视图更新</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UndoListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileModel<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据模型更新</span>        fileDisplay<span class="token punctuation">.</span><span class="token function">updateView</span><span class="token punctuation">(</span>fileModel<span class="token punctuation">.</span><span class="token function">getDefaultListModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 列表视图更新</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> fileModel<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         app<span class="token punctuation">.</span><span class="token function">updateUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// url地址栏更新</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229881679.png" alt="主界面"></p><ul><li>上侧可以后撤、前进，url地址栏显示</li><li>左侧目录树展开，并同步更新右侧文件列表</li></ul><h3 id="文件及文件夹拷贝"><a href="#文件及文件夹拷贝" class="headerlink" title="文件及文件夹拷贝"></a>文件及文件夹拷贝</h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229881679.png" alt="拷贝"></p><p>右键粘贴，将子目录下所有文件（夹）粘贴</p><h3 id="解压压缩"><a href="#解压压缩" class="headerlink" title="解压压缩"></a>解压压缩</h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229881679.png" alt="压缩"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> GUI </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CQU-Face</title>
      <link href="xiang-mu/cquface/"/>
      <url>xiang-mu/cquface/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端 <a href="https://github.com/ifrozenwhale/cquface-frontend">基于 Vue 的实现</a></p><p>后端 <a href="https://github.com/ifrozenwhale/cquface">基于 Django 的实现</a></p></blockquote><h1 id="CQU-FACE"><a href="#CQU-FACE" class="headerlink" title="CQU-FACE"></a>CQU-FACE</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li><p>图片上传/即时拍照人脸特征分析展示</p></li><li><p> 分析报告社区分享</p></li><li><p> 社区动态发现、点赞、评论</p></li><li><p> 用户关注、收藏等</p></li><li><p> 历史记录查询和编辑</p></li><li><p> 登录/未登录身份权限控制</p></li><li><p> 漂亮的UI</p></li></ul><h2 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h2><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>Vue.js</li><li>vue/cli (多页面)</li><li>vue-router</li><li>vuetify</li><li>axios</li></ul><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>分为前端路由控制和后端令牌验证</p><ul><li><p>通过vue-router导航守卫，使用router.beforeEach来检查路由跳转条件。</p><p>判断是否需要登录</p><ul><li>是，从localStorage中拿到account<ul><li>如果拿到account则可以跳转</li><li>否则重定向到登录页，并记录当前路由，登录后跳转回来</li></ul></li><li>否，可以跳转</li></ul></li><li><p>通过Axios拦截器Interceptors进行全局的ajax请求配置</p><ul><li>request：在Header中添加token字段</li><li>response：返回状态码405（自定义），表示未授权，跳转登录页。</li></ul></li></ul><h3 id="处理跨域问题、CSRF问题"><a href="#处理跨域问题、CSRF问题" class="headerlink" title="处理跨域问题、CSRF问题"></a>处理跨域问题、CSRF问题</h3><ul><li><p>后端django-cors-headers配置解决跨域问题</p></li><li><p>axios配置头Header添加X-CSRFToken，通过正则表达来从cookie中拿到csrftoken，进行验证</p></li></ul><h3 id="路由控制"><a href="#路由控制" class="headerlink" title="路由控制"></a>路由控制</h3><ul><li>由router-view控制路由，以及路由对应的视图。并配置404页面。</li></ul><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><ul><li>使用vue/cli快速搭建前端工程，形成目录结构和必要文件</li><li>配置Vue多页面，welcome为单独页，应用页单独页</li><li>在App.vue中进行全局模板的配置，上方使用一个Bar，左侧使用抽屉导航栏，下方使用Footer页脚，中间部分为功能部件，使用<router-view>，由vue-router进行控制显示视图页面。</router-view></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>组件化开发，封装常用的部分为单Vue组件，在其他页面引入，代码复用。</li><li>API接口全部封装为函数，由单独的js文件进行管理，需要的页面中只需引入。</li><li>界面简洁，使用v-if条件渲染，位置重用，试图切换，避免一切不必要的显示。</li><li>注重用户交互，给予良好的操作提示。</li><li>响应式页面，注意屏幕尺寸适配。</li><li>提供了严格的表单数据校验。</li></ul><h2 id="个人工作"><a href="#个人工作" class="headerlink" title="个人工作"></a>个人工作</h2><ol><li>前端、后端项目框架搭建</li><li>前端的依赖配置、权限控制、路由控制、请求控制，异常处理</li><li>前端页面实现<ul><li>欢迎页，模板页</li><li>登录、注册模块</li><li>头像处理、信息修改模块</li><li>图片数据采集，分析报告显示、语音播报，分享</li><li>历史分享管理</li></ul></li><li>后端异常处理</li><li>整合所有前端模块，对接前后端模块，调试分析</li><li>界面优化，用户交互优化</li></ol><h1 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h1><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E6%AC%A2%E8%BF%8E.png" alt="Image text"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF.png" alt="个人信息"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E6%B3%A8%E5%86%8C.png" alt="Image text"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E5%BC%80%E5%A7%8B%E9%A1%B5.png" alt="Image text"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E5%88%86%E4%BA%AB.png" alt="Image text"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E8%AF%A6%E6%83%85.png" alt="Image text"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E5%8E%86%E5%8F%B2%E8%AF%86%E5%88%AB.png" alt="Image text"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E6%94%B6%E8%97%8F%E5%A4%B9.png" alt="Image text"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021计算机保研经历</title>
      <link href="ri-chang/ji-suan-ji-bao-yan-jing-li/"/>
      <url>ri-chang/ji-suan-ji-bao-yan-jing-li/</url>
      
        <content type="html"><![CDATA[<p>今年的保研终于尘埃落定了，又跟公司请了半天假，回家记录一下整个保研经历吧。</p><blockquote><p>兜兜转转，回到最初的梦想。</p></blockquote><h1 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h1><ul><li>末流 985，专业排名 11/229 （5%），小班排名 2/27（最后一届了）</li><li>四级 570 左右，六级 480 左右（别骂了别骂了）</li><li>几个校级奖学金，无国奖（再也没机会了，体测没 80 没法评了）</li><li>一个工训赛省一，负责软件和算法（不加分）</li><li>没复习，没刷题，几乎（面试前一晚上速成）裸面夏令营和预推免。</li></ul><h1 id="报考心理"><a href="#报考心理" class="headerlink" title="报考心理"></a>报考心理</h1><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li>坚决不读博</li><li>报的默认学硕，优先学硕（同等档次忽略学校差距，考虑学硕）</li><li>就业向，暂时不想卷互联网 / 高校</li><li>对方向无感，不想做 AI，不冲强组</li></ul><blockquote><p>看得出来我是个辣鸡了呜呜呜</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>随缘 清北 / 上交</li><li>目标 <strong>北航</strong> / 南大 / 中科大</li><li>保底 北理 / 华科</li></ul><h1 id="夏令营"><a href="#夏令营" class="headerlink" title="夏令营"></a>夏令营</h1><h2 id="申请情况"><a href="#申请情况" class="headerlink" title="申请情况"></a>申请情况</h2><p>咱也学着来做个表，供学弟学妹们参考。</p><table><thead><tr><th align="left">学校</th><th align="left">院 / 实验室</th><th align="left">初审</th><th align="left">考核</th><th align="left">备注</th><th align="left">排名方式（默认专排）</th></tr></thead><tbody><tr><td align="left">北航</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">学硕 offer</td><td align="left">VR 国重，最终 offer</td><td align="left">小班</td></tr><tr><td align="left">北理</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">offer，立即放弃</td><td align="left">详谈</td><td align="left">小班</td></tr><tr><td align="left">复旦</td><td align="left">计算机学院</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">中科院计算所</td><td align="left">网数</td><td align="left"></td><td align="left"></td><td align="left">可以霸面找机会，但是自己对中科院系统不感兴趣</td><td align="left"></td></tr><tr><td align="left">哈工大深圳</td><td align="left">计算机学院</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">南京大学</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">线上笔试挂</td><td align="left">初审海王营，线上先一筛波</td><td align="left"></td></tr><tr><td align="left">上海交大</td><td align="left">电院 / 计算机系</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">小班</td></tr><tr><td align="left">南开</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">offer，放弃实验室考核</td><td align="left">学院 offer 后，需要联系实验室考核</td><td align="left"></td></tr><tr><td align="left">山大</td><td align="left">计算机学院</td><td align="left"></td><td align="left"></td><td align="left">没盖学校的章，但是貌似不是主要原因（离谱</td><td align="left">小班</td></tr><tr><td align="left">人大</td><td align="left">信息学院</td><td align="left"></td><td align="left"></td><td align="left">学硕专硕分开录，学硕 bar 很高，CSP 很顶用</td><td align="left"></td></tr><tr><td align="left">同济</td><td align="left">电院 / 计算机</td><td align="left"></td><td align="left"></td><td align="left">本校保护</td><td align="left">小班</td></tr><tr><td align="left">武大</td><td align="left">计算机学院</td><td align="left"></td><td align="left"></td><td align="left">本校保护</td><td align="left"></td></tr><tr><td align="left">西安交大</td><td align="left">计算机学院</td><td align="left"></td><td align="left"></td><td align="left">目测卡了前 10</td><td align="left"></td></tr><tr><td align="left">西安交大</td><td align="left">软件学院</td><td align="left">√</td><td align="left">7 月份放弃</td><td align="left">目测卡第一志愿</td><td align="left"></td></tr><tr><td align="left">中科大</td><td align="left">计算机学院</td><td align="left"></td><td align="left"></td><td align="left">目测卡了前 10，但是导师推荐可入营</td><td align="left"></td></tr><tr><td align="left">中山</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">放弃入营</td><td align="left">环节较多，但很规范</td><td align="left"></td></tr><tr><td align="left">华中科大</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">立即放弃</td><td align="left">卡 rank 严重</td><td align="left">小班</td></tr><tr><td align="left">华东师范</td><td align="left">计算机学院</td><td align="left"></td><td align="left"></td><td align="left">无语</td><td align="left"></td></tr><tr><td align="left">天津大学</td><td align="left">智能与计算学部</td><td align="left">√</td><td align="left">7 月放弃</td><td align="left">Tanklab 夏令营模式</td><td align="left">小班</td></tr></tbody></table><h2 id="offer-情况"><a href="#offer-情况" class="headerlink" title="offer 情况"></a>offer 情况</h2><ul><li>夏令营整体入营情况比较惨烈，被拒了一大堆，但是好在入了营参加的都 offer 了。</li><li>前期用的基本都是专排，后面用的是小班排名，但是看不出什么差别。</li><li>按照顺序参加了：天大 -&gt; 西交 -&gt; 南大 -&gt; 南开 -&gt; 北理 -&gt; 北航 -&gt; 华科 -&gt; (放弃中山)</li></ul><h3 id="天大-tank-实验室"><a href="#天大-tank-实验室" class="headerlink" title="天大 tank 实验室"></a>天大 tank 实验室</h3><h4 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h4><ul><li>保研夏令营的第 0 站，是 tank 实验室负责的面试，有导师团 / 夏令营 / 预推免三种形式。导师团需要签约不能再参加别的地方，于是我选择了夏令营。事实上后面夏令营不需要再进行面试了，直接使用本次面试的成绩。</li><li>宣传很多，组里很有钱，大老板是杰青，招生的学长比较积极热情，鸽的时候还有点不好意思（7 月初鸽的）</li><li>比较看重简历，会仔细先筛一波简历，面试只有 5 分钟，PPT 讲一个项目，然后提问比较简单，比较开放性。</li></ul><h3 id="西交软院"><a href="#西交软院" class="headerlink" title="西交软院"></a>西交软院</h3><h4 id="体验-1"><a href="#体验-1" class="headerlink" title="体验"></a>体验</h4><ul><li>保研夏令营的第一站，给了西交。西交计院没入营，但是我转手把志愿改成了软院，给入营了。</li><li>卡双一流学校，卡学科评估 b+。计院卡 rank 了，软院貌似卡了第一志愿（我第二志愿软院的同学都没进）</li><li>招生老师对于往年鸽子情况很熟悉，坦言会有很多鸽子，事实证明是这样的。夏令营不发明确的 offer，但是据老师说都能够录取（发了，但没完全发）</li><li>单机位面试，6 分钟左右，PPT 讲解，比较水</li><li>有些老师不想联系学生，因为往年被鸽的比较惨，伤心了</li></ul><h4 id="部分题目（印象）"><a href="#部分题目（印象）" class="headerlink" title="部分题目（印象）"></a>部分题目（印象）</h4><ul><li>英语自我介绍（3 min）</li><li>项目介绍和提问（没涉及具体原理，只讲了做了什么工作，有什么突出的地方）</li><li>闲聊：你们计院和软院分开的吗，在一个校区吗，卓越班是什么，有什么区别，等等</li><li>下一个！</li></ul><h3 id="南大"><a href="#南大" class="headerlink" title="南大"></a>南大</h3><h4 id="体验-2"><a href="#体验-2" class="headerlink" title="体验"></a>体验</h4><ul><li>往年据说前 5% 稳入营，我在前 5%，本来不太担心。但是今年我被西交计院卡了，怕了，一直担心南大无法入营，甚至想着报南软了。但是还是试了一把，报了个专硕。</li><li>专硕学硕没啥区别，报的时候（好像）</li><li>海王营，放了超多人进初审，然后线上考试笔试，考的是比较偏的 408 知识，题目参见其他大佬</li><li>过了笔试的才能线下营（但是因为疫情又线上了，甚至因此还搞了一波复活赛，让一批人又进了</li></ul><h3 id="南开"><a href="#南开" class="headerlink" title="南开"></a>南开</h3><h4 id="体验-3"><a href="#体验-3" class="headerlink" title="体验"></a>体验</h4><ul><li>学院面试总体体验不错，好几个老师在，各司其职，我这组不怼人</li><li>作为天津双子星之一，比隔壁的考核要麻烦许多，分成两轮，先过学院的面试，会给你一个分数，拿着合格的面试单，去联系实验室。</li><li>学院的面试，没问项目和专业课。主要问英语（幸运就是自我介绍），问数学（线性代数、概率论等，我被问到了秩相关的问题），问了我校校训，问了我的学生工作。数学没复习，白给了 2 道题，但是最终面试分数还可以 &gt; 90</li><li>实验室面比较麻烦，考核比较多，大概率要看论文并复现（根据组，数量和难度不同，但是看了下都是顶会）。时间大概 1-3 周不等。实验室面也会问到学院面试成绩（如果低的话。</li><li>我联系的 DBIS 组要复现 1 篇，同学联系的百度组貌似是 3 篇（难顶）</li></ul><h3 id="北理"><a href="#北理" class="headerlink" title="北理"></a>北理</h3><h4 id="体验-4"><a href="#体验-4" class="headerlink" title="体验"></a>体验</h4><ul><li>没有报名系统，发邮件报名（好简陋.jpg）</li><li>提前联系了做大数据的某位老师，老师很热情，但是褒贬不一，我觉得要看和自己的发展规划是不是匹配，我当时还觉得不错，后来鸽的时候老师也祝福我支持我，感谢。</li><li>会有比较长的一天组织实验室宣讲，可能会有面试（我还面了一下 NLP 组，但是只是自我介绍了一下）</li><li>面试比较水。PPT 介绍项目，提问不涉及具体原理，比较开放。最后问我有没有联系导师，并让我保持联系积极交流（感觉应该稳？）</li><li>北理最后给 offer 有点那啥，可能是本校太多了，理解。外校给了很少的学硕，并且给了一堆 唐山研究院 的软工。</li></ul><h3 id="北航"><a href="#北航" class="headerlink" title="北航"></a>北航</h3><h4 id="体验-5"><a href="#体验-5" class="headerlink" title="体验"></a>体验</h4><ul><li>夏令营体验最好的，效率一如既往的高，全程邮件联系（电话为辅），第一天模拟双机位测试，第二天机试，第三、四天面试，当晚出结果（带排序的）</li><li>报名和北理一样简陋（不愧是舒克贝塔），但是会特别强调 ACM 类的比赛</li><li>要写一个 2000 字的科研计划，估计劝退一些人</li></ul><h4 id="机试"><a href="#机试" class="headerlink" title="机试"></a>机试</h4><ul><li>2 道题目，2 个小时。</li><li>没有实时评测，只有一个编译机告诉你是否通过编译。题目给了一组测试样例，需要本地 coding 本地测试，然后提交代码文件。</li><li>可以用 CSP 换算，目测 200 多分都够了，但是没啥优势，我是之前裸考了一次 CSP，200 来分，这次选择直接机试。</li><li>这次机试没有很算法的题（比如动态规划什么的），数据结构与算法内容足够，感觉比以前简单。</li><li>P1，写几个 struct，cmp 函数，做几次 sort，模拟一下就可以应该。</li><li>P2，选址规划问题，最小生成树 + 路径距离问题，选出一个警务站，满足出警需求。</li></ul><h4 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h4><ul><li>20 分钟，多个老师，开摄像头提问，无 PPT。</li><li>政治题，我抽到了我形势与政策的题目，科技自立</li><li>英语题，自我介绍一下（运气真好</li><li>数学题，问了凸函数、凸优化的东西（可能是看我学了最优化并且分数不高），还问了概率论（基础定理）</li><li>专业课，问了<ul><li>数据库：范式，键，索引</li><li>计组：实验情况，TLB 实现的如何，Cache 和 分支预测</li><li>编译原理：实验情况，多文件编译怎么做的，目标文件，地址重定向问题</li><li>操作系统：实验情况，那你说说操作系统启动过程，说说 BIOS</li><li>程序设计课程：代码量如何</li></ul></li><li>项目，问了实现情况，负责工作，创新点，后续的想法（拓展），代码量如何</li><li>规划，问了写的 2000 字的科研计划，问了当前这个领域的难点，你的想法，你有什么相关的基础</li></ul><h4 id="导师"><a href="#导师" class="headerlink" title="导师"></a>导师</h4><ul><li>虽然北航强 com，但是还是推荐先套个磁套个近乎，不然像我一样，等到名单出来再联系很仓促</li><li>北航出名单第二天下午 5 点前就要返回导师接收表（做不到也没关系，告知即可）</li><li>划重点：每个老师夏令营只有 1 个名额接收</li><li>再划重点：可能很多老师不回邮件</li><li>问题来了：到底是老师已经没有名额了，还是单纯的忙，没回？不敢等。而且线上夏令营，没法直接到办公室见面，只能邮件（部分导师留了电话），效率比较低。因此如果没提前套套瓷，就很焦虑。</li><li>我先是联系了一些做数据挖掘，大数据方向的组，都没有回复（至今未回复），其中一个老师回复名额已满。后转投其他实验室，不想做纯 CV（虽然是北航强项了），不想做软件理论（软件国重），联系了 VR 国重一位人很好的老师。后交流了一下，爽快签了。（真的好亲切啊）</li><li>今天进组群了，被要求先爆照（震惊</li></ul><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ul><li>机试分数未知，但是填系统的时候发现复试分数 295+（震惊到我了…），运气真好，是我不配了</li><li>上岸学硕（根据名次发学硕 or 专硕）</li></ul><h3 id="华科"><a href="#华科" class="headerlink" title="华科"></a>华科</h3><h4 id="体验-6"><a href="#体验-6" class="headerlink" title="体验"></a>体验</h4><ul><li>体验不太好，比较仓促的通知和仓促（和分到的组关系很大，我这组问题比较简单，有的组比较难）</li><li>面试单机位，说好 2-3 分钟的自我介绍，结果我被提前叫进去很久，并且让我做 7 分钟自我介绍</li><li>比较开放提问，问研究方向和规划</li><li>据老师说华科每年都被鸽穿（抱歉了老师，没来得及说声放弃面试），不过立马就放弃 offer 了</li></ul><h3 id="中山"><a href="#中山" class="headerlink" title="中山"></a>中山</h3><ul><li>入营后放弃，规模很大</li><li>预推免据说穿了</li></ul><h1 id="预推免"><a href="#预推免" class="headerlink" title="预推免"></a>预推免</h1><h2 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h2><ul><li><strong>背景</strong>：北航上岸之后，舒舒服服天天玩，躺平到了 9 月初，然后忙着找实习</li><li><strong>报名心态：</strong>看着同学夏令营人均清北华五人，有点心动了，怕自己后悔，就报了（清北交浙，太难了）</li><li><strong>原则：</strong>不报拿了 offer 也不太想去的（比如南大，个人倾向选北航，所以直接不报了）</li></ul><h2 id="申请情况-1"><a href="#申请情况-1" class="headerlink" title="申请情况"></a>申请情况</h2><table><thead><tr><th align="left">学校</th><th align="left">院 / 实验室</th><th align="left">初审</th><th align="left">考核</th><th align="left">备注</th><th align="left">排名方式</th></tr></thead><tbody><tr><td align="left">北京大学</td><td align="left">软件与微电子学案</td><td align="left">√</td><td align="left">01-05 方向，候补 30 左右</td><td align="left"></td><td align="left">小班</td></tr><tr><td align="left">复旦大学</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">学硕，大数据与数据科学，候补靠前</td><td align="left">第一志愿</td><td align="left">小班</td></tr><tr><td align="left">浙江大学</td><td align="left">计算机学院</td><td align="left">√</td><td align="left">候补 30 左右</td><td align="left"></td><td align="left">小班</td></tr></tbody></table><h2 id="面试情况"><a href="#面试情况" class="headerlink" title="面试情况"></a>面试情况</h2><p>真裸面了。连双机位测试都是中秋在外旅游的时候找了个临时的地方整的，可见完全没做好准备。</p><h3 id="北大软微"><a href="#北大软微" class="headerlink" title="北大软微"></a>北大软微</h3><ul><li>软微在绿群被吹成神了，有幸和神打交道，知足了。</li><li>准备材料麻烦的一批，找了一大堆同学帮忙（在北京实习，没回学校）</li><li>面试随机顺序，要等的很心累啊，双机位</li><li>没有手撕题目</li><li>英文自我介绍</li><li>问了数据库（各种 sql，存储过程，触发器）</li><li>问了计网（NAT 相关知识和技术）</li><li>问了常用的语言，C++/Java，项目经验（软微果然实在）</li><li>其他的就是项目了好像，忘了，唉没用心准备</li></ul><h3 id="浙大计院"><a href="#浙大计院" class="headerlink" title="浙大计院"></a>浙大计院</h3><ul><li>英文自我介绍</li><li>问了 C++ 内存模型，Java 内存模型，区别，优缺点（怎么会问到这个阿哲）</li><li>项目相关</li><li>sorry，真… 忘了问了啥了呜呜</li></ul><h3 id="复旦计院"><a href="#复旦计院" class="headerlink" title="复旦计院"></a>复旦计院</h3><h4 id="机试-1"><a href="#机试-1" class="headerlink" title="机试"></a>机试</h4><ul><li>自我监督，无摄像头，三道题目，2 个半小时</li><li>第一题双指针，奇偶数摆位置</li><li>第二题跑了个 Floyd 维护要求的最值</li><li>第三题一维 DP，一步只能跳 1 步 or 跳到下一个元素的位置，不知道做的对不对</li></ul><h4 id="英语面"><a href="#英语面" class="headerlink" title="英语面"></a>英语面</h4><blockquote><p>口语渣给跪了</p></blockquote><ul><li>1 min 自我介绍</li><li>问喜欢的 subject</li><li>还问了几个，忘了，都是常见的 topic</li><li>最后一个问题没听清</li></ul><h3 id="专业面"><a href="#专业面" class="headerlink" title="专业面"></a>专业面</h3><ul><li>复旦的面试系统需要取号。前几天实在是面的不想面了（没准备，经常白给），因此前一天晚上看电影前蹲点，抢了个比较早的面试</li><li>问机试题，说题目 + 思路</li><li>问项目</li><li>问机器学习、最优化（决策树，bp 算法，梯度下降）</li><li>其他的忘记了 orz</li></ul><h1 id="填系统"><a href="#填系统" class="headerlink" title="填系统"></a>填系统</h1><h2 id="等-offer-（碎碎念）"><a href="#等-offer-（碎碎念）" class="headerlink" title="等 offer （碎碎念）"></a>等 offer （碎碎念）</h2><ul><li>浙大（觉得机会不大）和复旦（内心兴趣不高），一直没有联系导师，导致在当天收到候补 offer 后，来不及联系。</li><li>因为一直也蛮想去北航的，也已经联系了不错的老师，不想鸽，加上这个节点浙复录取算是开盲盒，有一定没有风险，所以还是去北航了。</li></ul><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><ul><li>下午 6 点，复旦一个很好的老师回电话了，感觉老师真不错，不过没缘了，他还诧异我怎么突然就拒了 offer</li><li>晚上 9 点，复旦另外一个看起来不错的老师回邮件让加微信</li><li>选择北航，也因为自己对工信部这几个学校挺有好感，航空航天四个字也很有情怀哈哈，虽然不能当饭吃，但是也说不定。</li><li>后面也有过摇摆和深夜 emo，觉得并不是一个最优解，但是确实是听从内心的选择，我觉得也是 “合适” 的选择，继续努力啦！</li></ul><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><ul><li>夏令营的 bar 是真的高，华五很难；预推免的 bar 低很多，bit 除外</li><li>不要盲目羡慕 title，否则会痛苦</li><li>强导虽好，适合自己最好（以后想做啥）</li><li>联系导师还是得脸皮厚，不联系白不联系</li><li>不管是夏令营还是预推免，只要 rank 够高，进了初审，面试情况只是决定了你什么时候能被录取，按照今年这个行情，华五基本上进了初审，面试别太离谱，都能被录到，而且鸽的速度挺快的</li><li>大部分情况下，专业排名才是王道（综排出太晚了）</li><li>对于普通人，不冲 paper 强组，专业课扎实了就是神</li><li>别低估自己，要敢于尝试；要躺平，就要彻底躺平；不想躺平，就努力做好迎接 offer 的准备。不要像我一样躺平，但又没完全躺。机会摆在面前，但是准备不充分，选择了放弃。虽然也许会发展的更好，但是当时做选择时没做好准备，是很不应该的。</li><li>别高估自己，还是要有一个保底，这年头有些学校的 bar 高的很离谱（哪里来的自信）。</li><li>别盲目信任学校，有的学校鸽起学生来很不讲道理，那些风评不好，说法含糊的就多留一手。</li><li>别以收集 offer 为傲，尽早放弃。已经和导师、学校说好了（不鸽人的），如果不是确实去处好很多，尽量还是不要鸽了吧。</li><li>其他待补充</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目主页（部分）</title>
      <link href="xiang-mu/xiang-mu-zhu-ye/"/>
      <url>xiang-mu/xiang-mu-zhu-ye/</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计-开发项目-专业实践-数据科学"><a href="#程序设计-开发项目-专业实践-数据科学" class="headerlink" title="程序设计 | 开发项目 | 专业实践 | 数据科学"></a>程序设计 | 开发项目 | 专业实践 | 数据科学</h1><blockquote><p>Github 地址 <a href="https://github.com/ifrozenwhale">ifrozenwhale</a></p></blockquote><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><h3 id="共享网络画板"><a href="#共享网络画板" class="headerlink" title="共享网络画板"></a>共享网络画板</h3><p>一个网络画板，支持本地或者联机同步绘图，多种图形（任意曲线、圆点、直线、矩形、三角形），支持套索工具，样式填充、修改，形状调整、移动，支持 undo 与 redo，支持保存和导出图片等。</p><p><a href="../gong-xiang-wang-luo-hua-ban/">blog</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1587700600198.png" alt="画板主页"></p><h3 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h3><p>使用 Java 实现，支持文件树和文件列表，支持文件夹创建、删除、复制、粘贴、加密解密、压缩解压。</p><p><a href="../file-manager">blog</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/1588229853020.png" alt="文件主页"></p><h3 id="经典小游戏"><a href="#经典小游戏" class="headerlink" title="经典小游戏"></a>经典小游戏</h3><h4 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h4><p><a href="https://github.com/ifrozenwhale/classic_game/tree/mine_sweeping">code</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210526234849586.png" alt="扫雷界面"></p><h4 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h4><p><a href="https://github.com/ifrozenwhale/classic_game/tree/snake">code</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210526234753427.png" alt="贪吃蛇结束游戏"></p><h4 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h4><p><a href="https://github.com/ifrozenwhale/classic_game/tree/gobang">code</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210526234821000.png" alt="五子棋游戏"></p><h4 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h4><p><a href="https://github.com/ifrozenwhale/classic_game/tree/calculator">code</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210526234715487.png" alt="栈计算器"></p><h3 id="ATM-模拟"><a href="#ATM-模拟" class="headerlink" title="ATM 模拟"></a>ATM 模拟</h3><p>初学面向对象时，使用 C++ 完成的，基于命令行的ATM模拟程序的设计。</p><p>实现了分类账户（存款、取款），转账，交易记录，限额，未读消息等功能，实现了接口分离。</p><p><a href="https://github.com/ifrozenwhale/Easy-ATM">code</a></p><h3 id="基于-CAS-的单点登录系统"><a href="#基于-CAS-的单点登录系统" class="headerlink" title="基于 CAS 的单点登录系统"></a>基于 CAS 的单点登录系统</h3><p>基于 CAS （统一认证服务）流程，设计了自己的单点登录、登出系统。</p><p><a href="https://github.com/ifrozenwhale/JAVAEE_SSO">code</a></p><h3 id="基于-servlet-的-MVC-框架实现"><a href="#基于-servlet-的-MVC-框架实现" class="headerlink" title="基于 servlet 的 MVC 框架实现"></a>基于 servlet 的 MVC 框架实现</h3><p>通过实现 IOC 容器，管理 Java Bean，使用 servlet 实现 GET/PUT 请求处理控制器，并提供 ModelView 模式或 Json 对象。</p><p><a href="https://github.com/ifrozenwhale/myspringmvc">https://github.com/ifrozenwhale/myspringmvc</a></p><p>使用自己的 MVC 框架，编写应用程序。</p><p>返回 JSP 页面的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyController</span><span class="token annotation punctuation">@MyRequestMapping</span><span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppController</span> <span class="token punctuation">{</span>    <span class="token comment">// 自动依赖注入</span>    <span class="token annotation punctuation">@MyAutowired</span>    <span class="token keyword">private</span> <span class="token class-name">AppService</span> appService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MyAutowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookService</span> bookService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MyRequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/bookpage"</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token comment">// POST 方法 </span>    <span class="token annotation punctuation">@ResponseView</span>    <span class="token keyword">public</span> <span class="token class-name">MyModelView</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MyRequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@MyRequestParam</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token annotation punctuation">@MyRequestParam</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">MyModelView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyModelView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Model And View 模式</span>        bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jsp view name</span>        mv<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span><span class="token string">"bookinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addModel</span><span class="token punctuation">(</span><span class="token string">"bookList"</span><span class="token punctuation">,</span> bookService<span class="token punctuation">.</span><span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@MyRequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/bookpage"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token comment">// GET 方法 </span>    <span class="token annotation punctuation">@ResponseView</span>    <span class="token keyword">public</span> <span class="token class-name">MyModelView</span> <span class="token function">showBookPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">MyModelView</span> modelView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyModelView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> bookList <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelView<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span><span class="token string">"bookinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelView<span class="token punctuation">.</span><span class="token function">addModel</span><span class="token punctuation">(</span><span class="token string">"bookList"</span><span class="token punctuation">,</span> bookList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供 Restful API，返回 Json 对象的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyController</span><span class="token annotation punctuation">@MyRequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@MyAutowired</span>    <span class="token keyword">private</span> <span class="token class-name">BookService</span> bookService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MyRequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/book"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MyRequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> sid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">getBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@MyRequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/book"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"POST"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">RestModel</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MyRequestParam</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@MyRequestParam</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token annotation punctuation">@MyRequestParam</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span><span class="token punctuation">{</span>        bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestModel</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="科创与开发项目"><a href="#科创与开发项目" class="headerlink" title="科创与开发项目"></a>科创与开发项目</h2><h3 id="基于数据挖掘的编程助手研究"><a href="#基于数据挖掘的编程助手研究" class="headerlink" title="基于数据挖掘的编程助手研究"></a>基于数据挖掘的编程助手研究</h3><p>基于开源项目搭建OJ系统，收集用户编程练习数据，二次开发，利用Java进行数据统计、用户行为分析，并使用微信小程序作为移动前端，进行数据可视化和互动，提供包括编程打卡、错题收集、习惯记录、任务计划等功能。</p><p><a href="../wecode/">blog</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527004206446.png" alt="今天你打卡了吗"></p><h3 id="基于树莓派的生活垃圾智能分类系统"><a href="#基于树莓派的生活垃圾智能分类系统" class="headerlink" title="基于树莓派的生活垃圾智能分类系统"></a><a href="https://github.com/ifrozenwhale/raspberry-garbage-classfier">基于树莓派的生活垃圾智能分类系统</a></h3><p>整个项目由机械结构、电控、识别和展示四个部分构成，自己主要负责识别和展示，以及和电控的通信。电控部分主要是基于arduino，识别和展示基于树莓派4。</p><p>使用 keras 做了InceptionV3/mobile_net 的迁移学习，冻结了全连接层之前的所有层，主要基于华为云垃圾分类大赛的数据集重新训练全连接层。事实上，因为比赛涉及的垃圾种类并不多，也比较正常，这样的训练效率、准确率都挺高的。</p><p>考虑到树莓派的性能以及比赛的需求，并没有采用对视频流实时进行识别，而是手动设置视频采样频率，定时拍照分析。</p><p>做了较多的交互式展示：</p><ul><li> 宣传视频播放和自动切换</li><li> 视频照片采集可视化</li><li> 垃圾分类结果显示</li><li> 历史识别记录</li><li> 垃圾桶满载显示</li></ul><p>启动web并启动摄像头后，摄像头会实时进行照片采集，并请求后端的图像识别分类 API，得到分类结果，如果结果非空，表示有垃圾待分类。如果此时位于宣传片播放界面，则切换到垃圾分类界面；否则直接显示垃圾分类结果。</p><p>后端将web服务、分类算法、电控通信集成在了一起。</p><ul><li>通过 socketio 和浏览器建立长连接，用于推送结束信号/满载信号；</li><li>提供垃圾分类 API，返回垃圾分类结果和当前垃圾数量</li><li>使用多线程，监听和 arduino 的串口 USB 通信</li><li>使用内存数据库 Redis，解决global 变量在多线程中的不一致问题。</li></ul><h3 id="基于百度API的人脸分析和轻社交"><a href="#基于百度API的人脸分析和轻社交" class="headerlink" title="基于百度API的人脸分析和轻社交"></a>基于百度API的人脸分析和轻社交</h3><p><a href="../cquface/">blog</a></p><p>基于百度API的人脸检测与分析，并语音播报。支持图片上传/即时拍照人脸特征分析展示，分析报告分享、发现、点赞、评论，用户关注、收藏等， 历史记录查询和编辑， 登录/未登录身份权限控制等。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/%E8%AF%A6%E6%83%85.png" alt="分析页面"></p><h2 id="课程实践"><a href="#课程实践" class="headerlink" title="课程实践"></a>课程实践</h2><h3 id="组成原理-体系结构-5级流水线多周期-CPU-的实现"><a href="#组成原理-体系结构-5级流水线多周期-CPU-的实现" class="headerlink" title="组成原理/体系结构 | 5级流水线多周期 CPU 的实现"></a><strong>组成原理/体系结构</strong> | 5级流水线多周期 CPU 的实现</h3><p>使用Verilog实现了一个拥有五级流水线的MIPS CPU，包含基本指令和异常处理在内的57条<br>指令。实现了写回策略，四路组相连、伪LRU替换策略的cache缓存。</p><h3 id="计算机网络-网络（隧道）协议实现"><a href="#计算机网络-网络（隧道）协议实现" class="headerlink" title="计算机网络 | 网络（隧道）协议实现"></a><strong>计算机网络</strong> | 网络（隧道）协议实现</h3><p>在Linux上使用C语言在数据链路层上通信，实现Ethernet、IPv4和UDP协议以及应用层封装。包括各层数据的校验，IP 分片与重组，最后为两个用户聊天的形式。</p><p><a href="../ip-protocal/">blog</a></p><h3 id="编译原理-简单-C-语言子集的玩具编译器"><a href="#编译原理-简单-C-语言子集的玩具编译器" class="headerlink" title="编译原理 | 简单 C 语言子集的玩具编译器]"></a><strong>编译原理</strong> | 简单 C 语言子集的玩具编译器]</h3><p><a href="https://github.com/ifrozenwhale/Easy-C-Compiler">code</a></p><p>目标实现一个简单 C 语言子集的编译器，生成汇编指令并运行，目前到语义分析阶段。</p><p>已经实现的语法分析，支持全局变量声明定义，函数调用等常见的语法，语法分析基于 LL(1) 方案，自顶向下使用栈进行分析，生成一棵语法分析树。</p><p>完成了部分语义分析，定义了包括函数在内的 7 种常见的语义错误，以及表达式计算。</p><p>​    <img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210507025150612.png" alt="语法分析树"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210601020342843.png" alt="语义分析"></p><h3 id="数字逻辑-实验和课程设计"><a href="#数字逻辑-实验和课程设计" class="headerlink" title="数字逻辑 | 实验和课程设计"></a><strong>数字逻辑</strong> | 实验和课程设计</h3><ul><li><strong>存储器设计</strong>：包括单、双端的 RAM，以及 FIFO 阵列。<a href="https://github.com/ifrozenwhale/digital-logic/tree/master/memory">code</a></li><li><strong>状态机设计</strong>：摩尔状态机序列检测器。<a href="https://github.com/ifrozenwhale/digital-logic/tree/master/sequence_detection">code</a></li><li><strong>密码锁：</strong>实现一个电子密码锁，也需要在 FPGA 上进行实际验证。<a href="https://github.com/ifrozenwhale/digital-logic/tree/master/project_lock">code</a></li></ul><h2 id="大数据与机器学习"><a href="#大数据与机器学习" class="headerlink" title="大数据与机器学习"></a>大数据与机器学习</h2><h3 id="基于-Spark-的电影推荐和分析系统"><a href="#基于-Spark-的电影推荐和分析系统" class="headerlink" title="基于 Spark 的电影推荐和分析系统"></a>基于 Spark 的电影推荐和分析系统</h3><p><a href="https://github.com/ifrozenwhale/bigdata-movie-recommend">部分 code</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527020001148.png" alt="热度日历图"></p><ul><li>收集 MovieLens 数据集，包含16万个电影，2400万条评分，67万条评价标签，将csv文件上传到完全分布式HDFS文件系统</li><li>scala、spark 读取 HDFS 文件，整理导入 MongoDB 数据库</li><li>MongoDB中加载数据，利用 sparkRdd 统计热门电影、高分电影，统计分年月、分类别的热门、高分电影数据</li><li>基于 ALS 协同过滤算法，得到用户电影推荐和相似电影推荐</li><li>通过 TF-IDF算法对标签的权重进行调，计算电影的内容特征向量，实现基于内容的电影推荐</li><li>使用 python、pymongo 和 matplotlib，读取 MongoDB 数据并进行可视化</li><li>使用 python 实现 SVD 奇异值分解进行电影推荐</li><li>Python flask 构建后端数据服务，vue 构建前端页面，交互式展示数据。</li><li>使用 VUE 前端框架与 Flask 后端框架进行结果可视化平台搭建</li></ul><h3 id="机器学习与优化方法"><a href="#机器学习与优化方法" class="headerlink" title="机器学习与优化方法"></a>机器学习与优化方法</h3><ul><li>二分类与多分类 <a href="https://github.com/ifrozenwhale/machine-learning-code/tree/master/exp1">Logistics 回归</a></li><li>离散和连续 <a href="https://github.com/ifrozenwhale/machine-learning-code/tree/master/exp2">决策树 |分类树与回归树</a></li><li><a href="https://github.com/ifrozenwhale/Optimization_algorithm/blob/master/simplex_method">单纯形法</a>（大 M 法，对偶单纯形）</li><li><a href="https://github.com/ifrozenwhale/Optimization_algorithm/blob/master/phr">PHR 算法</a>(PHR 算法、无约束混合优化问题的 dfp 算法，一维搜索优化问题的黄金分割法)</li></ul><h3 id="大数据处理实验"><a href="#大数据处理实验" class="headerlink" title="大数据处理实验"></a>大数据处理实验</h3><ul><li>准备工作 <a href="https://github.com/ifrozenwhale/bigdata-homework/tree/master/lab1">数据清洗和预处理</a></li><li>推荐算法 <a href="https://github.com/ifrozenwhale/bigdata-homework/tree/master/lab2">SVD 奇异值分解</a></li><li>文本分析 <a href="https://github.com/ifrozenwhale/bigdata-homework/tree/master/lab3">TF-IDF</a></li></ul><h2 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h2><h3 id="网络建模-音乐影响网络"><a href="#网络建模-音乐影响网络" class="headerlink" title="网络建模 音乐影响网络"></a>网络建模 <a href="https://github.com/ifrozenwhale/2021icm-problemD">音乐影响网络</a></h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210309014544899.png" alt="音乐影响子网"></p><h3 id="元胞自动机-计算机模拟-卢浮宫计算模拟"><a href="#元胞自动机-计算机模拟-卢浮宫计算模拟" class="headerlink" title="元胞自动机 | 计算机模拟 卢浮宫计算模拟"></a>元胞自动机 | 计算机模拟 <a href="https://github.com/ifrozenwhale/2019icm-problemD">卢浮宫计算模拟</a></h3><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527021429093.png" alt="疏散模拟"></p><h3 id="不等圆的不重叠随机排列"><a href="#不等圆的不重叠随机排列" class="headerlink" title="不等圆的不重叠随机排列"></a>不等圆的不重叠随机排列</h3><p><a href="https://github.com/ifrozenwhale/non-overlapping-circle">code</a></p><p>不等圆的packing问题，基于概率策略化的随机游走。在缝隙处可额外进行补充，使更加丰满。</p><p> <img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210527003719354.png" alt="七彩球鲸鱼"></p><h3 id="自定义轮廓的随机纹路生成"><a href="#自定义轮廓的随机纹路生成" class="headerlink" title="自定义轮廓的随机纹路生成"></a>自定义轮廓的随机纹路生成</h3><p>体现了数学中的随机美。可以给出图形，在图形内基于 Voronoi 图生成随机纹路，可以进行颜色填充。</p><p><a href="https://github.com/ifrozenwhale/randomPicture">code</a></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/color_whale.png" alt="五彩鲸鱼"></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/voronoi%E9%B2%B8%E9%B1%BC.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> 专业基础 </tag>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拥有个人博客啦</title>
      <link href="ri-chang/hello-world/"/>
      <url>ri-chang/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="属于沃若的小窝"><a href="#属于沃若的小窝" class="headerlink" title="属于沃若的小窝"></a>属于沃若的小窝</h1><blockquote><p>好羞耻的标题啊，好像匿名（x，但是你们也不知道我是谁是不是</p></blockquote><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>去年疫情试着在 WordPress 上开了个博客 <a href="https://frozenwhale.wordpress.com/">frozenwhale’s blog</a>，写了三篇博文…然后就鸽了鸽了。</p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210519202154508.png" alt="WordPress主页"></p><p>后来转战 csdn，但是发了两篇简单的题解后，又咕咕咕了<span class="github-emoji"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://frozenwhale.oss-cn-beijing.aliyuncs.com/img/image-20210519204249436.png" alt="csdn主页"></p><p>尴尬，怎么还有 3000 的访问量（x，菜鸡的事实被发现了</p><p>自从习惯 google 之后，发现经常搜到一些个人博客，在被各种 lab 折磨的时候给了莫大的参考价值，于是也打算建一个。</p><p>于是今晚上就直接用 hexo 搭了一个个人博客，本来计划托管在 github，但是想到经常登不上 github.io，就部署到了之前做项目嫖的服务器上去了，不得不说，现在整个一套真完善。</p><ul><li>npm 几行命令就可以启动一个 hexo 的博客服务器</li><li>再几行命令装几个插件</li><li>去 github 上逛逛街，套个主题，再个性化定制一下。</li><li>使用 typora 写 markdown 即可，图片存到阿里云的 oss。</li><li>在服务器上开个 git 仓库，hexo d -g 远程推送一下就可以了，真的很方便。</li></ul><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>目前大三，快保研了，最近不会更，希望大四可以分享自己的生活~</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
